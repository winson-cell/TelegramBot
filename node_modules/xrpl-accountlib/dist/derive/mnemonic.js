"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bip39_1 = require("bip39");
var Bip32 = __importStar(require("bip32"));
var ripple_keypairs_1 = require("ripple-keypairs");
var Account_1 = __importDefault(require("../schema/Account"));
var Utils = __importStar(require("../utils"));
var mnemonic = function (words, options) {
    if (options === void 0) { options = {}; }
    var passphrase = options.passphrase ? options.passphrase : undefined;
    var accountPath = options.accountPath && !isNaN(parseInt(options.accountPath))
        ? options.accountPath
        : 0;
    var changePath = options.changePath && !isNaN(parseInt(options.changePath))
        ? options.changePath
        : 0;
    var addressIndex = options.addressIndex && !isNaN(options.addressIndex)
        ? options.addressIndex
        : 0;
    var Path = "m/44'/144'/".concat(accountPath, "'/").concat(changePath, "/").concat(addressIndex);
    var Seed = (0, bip39_1.mnemonicToSeedSync)(words, passphrase);
    var m = Bip32.fromSeed(Seed);
    var Node = m.derivePath(Path);
    var publicKey = Utils.bufferToHext(Node.publicKey);
    // @ts-ignore
    var privateKey = Utils.bufferToHext(Node.privateKey);
    var Keypair = {
        publicKey: publicKey,
        privateKey: "00" + privateKey
    };
    var Address = (0, ripple_keypairs_1.deriveAddress)(Keypair.publicKey);
    return new Account_1.default({
        address: Address,
        mnemonic: words,
        passphrase: passphrase,
        keypair: Keypair,
        path: Path
    });
};
exports.default = mnemonic;
