"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var XrplSecretNumbers = __importStar(require("xrpl-secret-numbers"));
var Utils = __importStar(require("../utils"));
var Account_1 = __importDefault(require("../schema/Account"));
var secretNumbers = function (numbers, skipChecksum) {
    if (skipChecksum === void 0) { skipChecksum = false; }
    var secretNumbers = numbers;
    if (skipChecksum) {
        var notChecksummed = Array.isArray(numbers)
            ? numbers
            : numbers.split(' ');
        if (notChecksummed.every(function (c) { return String(c).length === 5 || String(c).length === 6; })) {
            secretNumbers = notChecksummed.map(function (n, i) {
                var s = String(n).slice(0, 5);
                return s + XrplSecretNumbers.Utils.calculateChecksum(i, Number(s));
            });
        }
    }
    var secretNumbersAccount = new XrplSecretNumbers.Account(secretNumbers);
    var keypair = secretNumbersAccount.getKeypair();
    return new Account_1.default({
        algorithm: Utils.getAlgorithmFromKey(keypair.privateKey),
        address: secretNumbersAccount.getAddress(),
        familySeed: secretNumbersAccount.getFamilySeed(),
        keypair: keypair,
        secretNumbers: secretNumbersAccount.getSecret()
    });
};
exports.default = secretNumbers;
