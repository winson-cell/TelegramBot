"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setNativeAsset = exports.signAndSubmit = exports.sign = void 0;
var assert_1 = __importDefault(require("assert"));
var xrpl_binary_codec_prerelease_1 = require("xrpl-binary-codec-prerelease");
var ripple_keypairs_1 = require("ripple-keypairs");
var xrpl_client_1 = require("xrpl-client");
var xrpl_sign_keypairs_1 = __importDefault(require("xrpl-sign-keypairs"));
var Account_1 = __importDefault(require("../schema/Account"));
var utils_1 = require("../utils");
var __1 = require("../");
var setNativeAsset = function (Tx) {
    __1.nativeAsset.set("XRP");
    // Xahau Mainnet, Xahau Testnet
    if ([21337, 21338].indexOf(Tx === null || Tx === void 0 ? void 0 : Tx.NetworkID) > -1) {
        __1.nativeAsset.set("XAH");
    }
    // console.log(nativeAsset.get())
};
exports.setNativeAsset = setNativeAsset;
var sign = function (transaction, account, definitions) {
    var _a, _b, _c;
    var accounts = [];
    var Tx = Object.assign({}, transaction);
    setNativeAsset(Tx);
    if (Object.keys(Tx).indexOf("TransactionType") > -1) {
        if (((_a = Tx === null || Tx === void 0 ? void 0 : Tx.TransactionType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "signin") {
            Object.assign(Tx, {
                TransactionType: undefined,
                SignIn: true,
            });
        }
    }
    if (account instanceof Object && !Array.isArray(account)) {
        if (account instanceof Account_1.default) {
            accounts.push(account);
        }
        else {
            throw new Error("Account not instanceof XRPL Account");
        }
    }
    else if (Array.isArray(account)) {
        account.forEach(function (account) {
            if (account instanceof Account_1.default) {
                accounts.push(account);
            }
            else {
                throw new Error("Account not instanceof XRPL Account");
            }
        });
    }
    if (((_b = Tx === null || Tx === void 0 ? void 0 : Tx.TransactionType) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === "paymentchannelauthorize" ||
        ((_c = Tx === null || Tx === void 0 ? void 0 : Tx.command) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === "channel_authorize" ||
        (!(Tx === null || Tx === void 0 ? void 0 : Tx.TransactionType) &&
            !(Tx === null || Tx === void 0 ? void 0 : Tx.command) &&
            (((Tx === null || Tx === void 0 ? void 0 : Tx.channel) && (Tx === null || Tx === void 0 ? void 0 : Tx.amount)) || ((Tx === null || Tx === void 0 ? void 0 : Tx.Channel) && (Tx === null || Tx === void 0 ? void 0 : Tx.Amount))))) {
        if (accounts.length === 1) {
            if (typeof accounts[0]._signAs === "string" &&
                accounts[0]._signAs !== "") {
                throw new Error("Payment channel authorization: cannot Sign As");
            }
            var claimInput = (Tx === null || Tx === void 0 ? void 0 : Tx.channel) && (Tx === null || Tx === void 0 ? void 0 : Tx.amount)
                ? { channel: Tx.channel, amount: Tx.amount }
                : { channel: Tx.Channel, amount: Tx.Amount };
            var claim = (0, xrpl_binary_codec_prerelease_1.encodeForSigningClaim)(claimInput);
            var signed = (0, ripple_keypairs_1.sign)(claim, accounts[0].keypair.privateKey);
            return {
                type: "SignedPayChanAuth",
                id: "",
                signedTransaction: signed,
                txJson: claimInput,
                signers: [accounts[0].address || ""],
            };
        }
        else {
            throw new Error("Payment channel authorization: multi-signing not supported");
        }
    }
    if (accounts.length === 1) {
        var txJSON = JSON.stringify(Tx);
        var options = { signAs: undefined, definitions: definitions };
        if (typeof accounts[0]._signAs === "string" && accounts[0]._signAs !== "") {
            // signAs explicitly set
            options.signAs = accounts[0]._signAs;
        }
        var tx = (0, xrpl_sign_keypairs_1.default)(txJSON, accounts[0].keypair, options);
        return {
            type: "SignedTx",
            id: tx.id,
            signedTransaction: tx.signedTransaction,
            txJson: tx.txJson,
            signers: [
                typeof accounts[0]._signAs === "string"
                    ? accounts[0]._signAs
                    : accounts[0].address || "",
            ],
        };
    }
    else {
        var Codec = require("xrpl-binary-codec-prerelease");
        var MultiSignedTransactionBinary = (function () {
            if (transaction instanceof Object &&
                Array.isArray(transaction) &&
                accounts.length === 0 &&
                transaction.length > 0) {
                if (transaction.length ===
                    transaction.filter(function (t) {
                        return (t instanceof Object &&
                            t !== null &&
                            typeof t.signedTransaction === "string");
                    }).length) {
                    // MultiSign [ { signedTransaction: ... } , ... ]
                    return (0, utils_1.combine)(transaction.map(function (t) {
                        return t.signedTransaction.toUpperCase();
                    }), definitions);
                }
                else if (transaction.length ===
                    transaction.filter(function (t) {
                        return (typeof t === "string" && t.toUpperCase().match(/^[A-F0-9]+$/));
                    }).length) {
                    // MultiSign [ 'AEF9...', 'C6DA...' ]
                    return (0, utils_1.combine)(transaction.map(function (t) {
                        return t.toUpperCase();
                    }), definitions);
                }
                else {
                    throw new Error("TX Blob for multiSign not an array of { signedTransaction: ... } objects or blob strings");
                }
            }
            else {
                // MultiSign [ lib.sign(...), lib.sign(...) ]
                return (0, utils_1.combine)(accounts.map(function (account) {
                    return (0, xrpl_sign_keypairs_1.default)(JSON.stringify(Tx), account.keypair, {
                        signAs: typeof account._signAs === "string"
                            ? account._signAs
                            : account.address,
                        definitions: definitions,
                    }).signedTransaction;
                }), definitions);
            }
        })();
        var txJson = Codec.decode(MultiSignedTransactionBinary.signedTransaction, definitions);
        return {
            type: "MultiSignedTx",
            id: MultiSignedTransactionBinary.id,
            signedTransaction: MultiSignedTransactionBinary.signedTransaction,
            txJson: txJson,
            signers: txJson.Signers,
        };
    }
};
exports.sign = sign;
var signAndSubmit = function (transaction, client, account) { return __awaiter(void 0, void 0, void 0, function () {
    var connection, definitions, network, Fee, _a, signedTransaction, id, submitResponse;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                (0, assert_1.default)(typeof client !== "undefined", "First param. must be XrplClient (npm: xrpl-client) or wss:// node endpoint");
                connection = typeof client === "string" ? new xrpl_client_1.XrplClient(client) : client;
                return [4 /*yield*/, connection.definitions()];
            case 1:
                definitions = _c.sent();
                return [4 /*yield*/, (0, utils_1.networkInfo)(connection, true /** keep alive */)];
            case 2:
                network = _c.sent();
                if (!(network.features.hooks &&
                    String(Number((_b = transaction) === null || _b === void 0 ? void 0 : _b.Fee)) === "0")) return [3 /*break*/, 4];
                return [4 /*yield*/, (0, utils_1.networkTxFee)(connection, transaction)];
            case 3:
                Fee = _c.sent();
                Object.assign(transaction, { Fee: Fee });
                _c.label = 4;
            case 4:
                _a = sign(transaction, account, definitions ? new xrpl_binary_codec_prerelease_1.XrplDefinitions(definitions) : undefined), signedTransaction = _a.signedTransaction, id = _a.id;
                return [4 /*yield*/, connection.send({
                        command: "submit",
                        tx_blob: signedTransaction,
                    })];
            case 5:
                submitResponse = _c.sent();
                if (typeof client === "string") {
                    // If constructed on demand: close
                    connection.close();
                }
                return [2 /*return*/, {
                        tx_blob: signedTransaction,
                        tx_id: id,
                        response: submitResponse,
                    }];
        }
    });
}); };
exports.signAndSubmit = signAndSubmit;
exports.default = sign;
