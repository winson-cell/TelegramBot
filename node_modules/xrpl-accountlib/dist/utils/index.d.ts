/// <reference types="node" />
import { verify } from "ripple-keypairs";
import { XrplDefinitions } from "xrpl-binary-codec-prerelease";
import type Account from "../schema/Account";
import { XrplClient } from "xrpl-client";
declare function computeBinaryTransactionHash(txBlobHex: string): string;
declare function bytesToHex(a: number[]): string;
declare function deriveAddressWithEdPrefixer(publicKey: string): string;
declare function hexToBytes(a: string): number[];
declare function bufferToHext(buffer: Buffer): string;
declare function getAlgorithmFromKey(key: string): "ed25519" | "secp256k1";
declare function isValidClassicAddress(address: string): boolean;
declare function isValidAddress(address: string): boolean;
declare function isValidSeed(seed: string): boolean;
declare function isValidMnemnic(words: string): boolean;
declare function compressPubKey(pubkey: string): string;
declare function hash(hex: string): number[];
declare function encodeTransaction(TxJson: Record<string, unknown>, MultiSignAccount?: string, definitions?: XrplDefinitions): string;
declare function secp256k1_p1363ToFullyCanonicalDerSignature(p1363Signature: string): string;
declare function combine(multiSignedTxHex: string[], definitions?: XrplDefinitions): {
    id: string;
    signedTransaction: string;
};
declare const networkInfo: (client: XrplClient | string, keepCreatedConnectionAlive?: boolean) => Promise<{
    endpoint: string;
    networkId: number;
    ledgerSequence: number;
    ledger: import("xrpl-client").AnyJson;
    amendments: any;
    features: {
        hooks: boolean;
    };
    connection: XrplClient | null;
}>;
declare const networkTxFee: (client: XrplClient | string, tx?: string | Object | undefined, keepCreatedConnectionAlive?: boolean) => Promise<string>;
declare const accountAndLedgerSequence: (client: XrplClient | string, account: string | Account) => Promise<{
    networkInfo: {
        ledgerSequence: number | null;
        accountSequence: number | null;
        endpoint: string;
        networkId: number;
        features: {
            hooks: boolean;
        };
    };
    txValues: {
        Account: string | null;
        NetworkID: number;
        Sequence: number;
        LastLedgerSequence: number | undefined;
        Fee: string;
    };
}>;
export { bytesToHex, hexToBytes, bufferToHext, getAlgorithmFromKey, isValidAddress, isValidClassicAddress, isValidSeed, isValidMnemnic, deriveAddressWithEdPrefixer as deriveAddress, compressPubKey, hash, encodeTransaction, secp256k1_p1363ToFullyCanonicalDerSignature, verify as verifySignature, computeBinaryTransactionHash, combine, accountAndLedgerSequence, accountAndLedgerSequence as txNetworkAndAccountValues, networkInfo, networkTxFee, };
