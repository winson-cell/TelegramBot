"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.networkTxFee = exports.networkInfo = exports.txNetworkAndAccountValues = exports.accountAndLedgerSequence = exports.combine = exports.computeBinaryTransactionHash = exports.verifySignature = exports.secp256k1_p1363ToFullyCanonicalDerSignature = exports.encodeTransaction = exports.hash = exports.compressPubKey = exports.deriveAddress = exports.isValidMnemnic = exports.isValidSeed = exports.isValidClassicAddress = exports.isValidAddress = exports.getAlgorithmFromKey = exports.bufferToHext = exports.hexToBytes = exports.bytesToHex = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var lodash_1 = require("lodash");
var ripple_address_codec_1 = require("ripple-address-codec");
var buffer_1 = require("buffer/");
var AddressCodec = __importStar(require("ripple-address-codec"));
var bip39_1 = require("bip39");
var elliptic = __importStar(require("elliptic"));
var ripple_keypairs_1 = require("ripple-keypairs");
Object.defineProperty(exports, "verifySignature", { enumerable: true, get: function () { return ripple_keypairs_1.verify; } });
var assert_1 = __importDefault(require("assert"));
var hash_js_1 = __importDefault(require("hash.js"));
var hash_prefixes_1 = require("xrpl-binary-codec-prerelease/dist/hash-prefixes");
var hashes_1 = require("xrpl-binary-codec-prerelease/dist/hashes");
var xrpl_binary_codec_prerelease_1 = require("xrpl-binary-codec-prerelease");
var derive_1 = require("../derive");
var sign_1 = require("../sign");
var xrpl_client_1 = require("xrpl-client");
var sign_2 = require("../sign");
// Ugly, but no definitions when directly loading the lib file, and Signature() not exported in lib
var Signature = require("elliptic/lib/elliptic/ec/signature");
function computeBinaryTransactionHash(txBlobHex) {
    var prefix = hash_prefixes_1.HashPrefix.transactionID.toString("hex").toUpperCase();
    var input = buffer_1.Buffer.from(prefix + txBlobHex, "hex");
    return (0, hashes_1.sha512Half)(input).toString("hex").toUpperCase();
}
exports.computeBinaryTransactionHash = computeBinaryTransactionHash;
function bytesToHex(a) {
    return a
        .map(function (byteValue) {
        var hex = byteValue.toString(16).toUpperCase();
        return hex.length > 1 ? hex : "0" + hex;
    })
        .join("");
}
exports.bytesToHex = bytesToHex;
function deriveAddressWithEdPrefixer(publicKey) {
    (0, assert_1.default)(typeof publicKey === "string", "PubKey: not hex string");
    (0, assert_1.default)(publicKey.length === 64 || publicKey.length === 66, "PubKey: invalid length");
    (0, assert_1.default)(publicKey.match(/^[a-fA-F0-9]{64,66}$/), "PubKey: invalid characters (non HEX)");
    var pubKey = publicKey.length === 64 &&
        getAlgorithmFromKey("ED" + publicKey) === "ed25519"
        ? "ED" + publicKey
        : publicKey;
    return (0, ripple_keypairs_1.deriveAddress)(pubKey);
}
exports.deriveAddress = deriveAddressWithEdPrefixer;
function hexToBytes(a) {
    return new bn_js_1.default(a, 16).toArray(undefined, a.length / 2);
}
exports.hexToBytes = hexToBytes;
function bufferToHext(buffer) {
    return buffer.toString("hex").toUpperCase();
}
exports.bufferToHext = bufferToHext;
function getAlgorithmFromKey(key) {
    var bytes = hexToBytes(key);
    return bytes.length === 33 && bytes[0] === 0xed ? "ed25519" : "secp256k1";
}
exports.getAlgorithmFromKey = getAlgorithmFromKey;
function isValidClassicAddress(address) {
    return AddressCodec.isValidClassicAddress(address);
}
exports.isValidClassicAddress = isValidClassicAddress;
function isValidAddress(address) {
    return isValidClassicAddress(address);
}
exports.isValidAddress = isValidAddress;
function isValidSeed(seed) {
    try {
        return !!AddressCodec.decodeSeed(seed);
    }
    catch (e) {
        return false;
    }
}
exports.isValidSeed = isValidSeed;
function isValidMnemnic(words) {
    try {
        return !!(0, bip39_1.validateMnemonic)(words);
    }
    catch (e) {
        return false;
    }
}
exports.isValidMnemnic = isValidMnemnic;
function compressPubKey(pubkey) {
    (0, assert_1.default)(typeof pubkey === "string", "Uncompressed PubKey: not hex string");
    if (pubkey.length === 64) {
        // ed25519
        var edPubKey = "ED" + pubkey;
        (0, assert_1.default)(getAlgorithmFromKey(edPubKey) === "ed25519", "Key length ed25519, algo not ed25519");
        return edPubKey;
    }
    else if (pubkey.length === 66) {
        // Already compressed
        return pubkey;
    }
    else {
        // secp256k1
        (0, assert_1.default)(pubkey.length === 130, "Uncompressed pubkey: not 1+32+32 length");
    }
    // @ts-ignore
    var c = elliptic.curves.secp256k1.curve;
    var p = c.point(pubkey.slice(2, 66), pubkey.slice(66));
    var compressedPubKey = p.encodeCompressed("hex").toUpperCase();
    var algo = getAlgorithmFromKey(compressedPubKey);
    (0, assert_1.default)(algo === "secp256k1", "Unsupported curve: " + algo);
    return compressedPubKey;
}
exports.compressPubKey = compressPubKey;
function hash(hex) {
    return hash_js_1.default.sha512().update(hexToBytes(hex)).digest().slice(0, 32);
}
exports.hash = hash;
function encodeTransaction(TxJson, MultiSignAccount, definitions) {
    var Transaction = Object.assign({}, TxJson);
    (0, sign_2.setNativeAsset)(Transaction);
    if (typeof MultiSignAccount !== "undefined") {
        Object.assign(Transaction, { SigningPubKey: "" });
        return (0, xrpl_binary_codec_prerelease_1.encodeForMultisigning)(Transaction, MultiSignAccount, definitions);
    }
    else if (typeof Transaction.TxnSignature === "undefined" &&
        typeof Transaction.Signers === "undefined") {
        if (!(Transaction === null || Transaction === void 0 ? void 0 : Transaction.TransactionType) &&
            !(Transaction === null || Transaction === void 0 ? void 0 : Transaction.command) &&
            (((Transaction === null || Transaction === void 0 ? void 0 : Transaction.channel) && (Transaction === null || Transaction === void 0 ? void 0 : Transaction.amount)) ||
                ((Transaction === null || Transaction === void 0 ? void 0 : Transaction.Channel) && (Transaction === null || Transaction === void 0 ? void 0 : Transaction.Amount)))) {
            // Payment Channel Authorization
            return (0, xrpl_binary_codec_prerelease_1.encodeForSigningClaim)({
                channel: (Transaction === null || Transaction === void 0 ? void 0 : Transaction.channel) || (Transaction === null || Transaction === void 0 ? void 0 : Transaction.Channel),
                amount: (Transaction === null || Transaction === void 0 ? void 0 : Transaction.amount) || (Transaction === null || Transaction === void 0 ? void 0 : Transaction.Amount),
            });
        }
        // Regular TX signing
        return (0, xrpl_binary_codec_prerelease_1.encodeForSigning)(Transaction, definitions);
    }
    else {
        // Signed TX (tx_blob)
        return (0, xrpl_binary_codec_prerelease_1.encode)(Transaction, definitions);
    }
}
exports.encodeTransaction = encodeTransaction;
function secp256k1_p1363ToFullyCanonicalDerSignature(p1363Signature) {
    var rs = {
        n: "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141",
        r: p1363Signature.slice(0, 64),
        s: p1363Signature.slice(64),
    };
    var bn = {
        n: new bn_js_1.default(rs.n, 16),
        s: new bn_js_1.default(rs.s, 16),
    };
    var nMinusS = bn.n.sub(bn.s);
    rs.s = (nMinusS.lt(bn.s) ? nMinusS : bn.s).toString(16).toUpperCase();
    var nonCanonicalDer = new Signature(rs).toDER();
    return Buffer.from(nonCanonicalDer).toString("hex").toUpperCase();
}
exports.secp256k1_p1363ToFullyCanonicalDerSignature = secp256k1_p1363ToFullyCanonicalDerSignature;
function addressToBigNumber(address) {
    var hex = Buffer.from((0, ripple_address_codec_1.decodeAccountID)(address)).toString("hex");
    return new bn_js_1.default(hex, 16);
}
function compareSigners(left, right) {
    return addressToBigNumber(left.Signer.Account).cmp(addressToBigNumber(right.Signer.Account));
}
function combine(multiSignedTxHex, definitions) {
    // Signers must be sorted in the combined transaction - See compareSigners' documentation for more details
    var multiSignedTx = multiSignedTxHex.map(function (encoded) {
        return (0, xrpl_binary_codec_prerelease_1.decode)(encoded, definitions);
    });
    var sortedSigners = (0, lodash_1.flatMap)(multiSignedTx, function (tx) { var _a; return (_a = tx.Signers) !== null && _a !== void 0 ? _a : []; }).sort(compareSigners);
    var signedTransaction = (0, xrpl_binary_codec_prerelease_1.encode)(__assign(__assign({}, multiSignedTx[0]), { Signers: sortedSigners }), definitions);
    return {
        id: computeBinaryTransactionHash(signedTransaction),
        signedTransaction: signedTransaction,
    };
}
exports.combine = combine;
var networkInfo = function (client, keepCreatedConnectionAlive) {
    if (keepCreatedConnectionAlive === void 0) { keepCreatedConnectionAlive = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var connection, ledger, amendments, endpoint, networkId, ledgerSequence;
        var _a, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    (0, assert_1.default)(typeof client !== "undefined", "First param. must be XrplClient (npm: xrpl-client) or wss:// node endpoint");
                    connection = typeof client === "string" ? new xrpl_client_1.XrplClient(client) : client;
                    return [4 /*yield*/, connection.send({
                            command: "ledger",
                        })];
                case 1:
                    ledger = _f.sent();
                    return [4 /*yield*/, connection.send({
                            command: "ledger_entry",
                            index: "7DB0788C020F02780A673DC74757F23823FA3014C1866E72CC4CD8B226CD6EF4",
                            validated: true,
                        })];
                case 2:
                    amendments = (_b = (_a = (_f.sent())) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b.Amendments;
                    if (typeof client === "string" && !keepCreatedConnectionAlive) {
                        // If constructed on demand: close
                        connection.close();
                    }
                    endpoint = connection.getState().server.uri;
                    networkId = connection.getState().server.networkId;
                    ledgerSequence = Number(((_c = connection.getState().ledger) === null || _c === void 0 ? void 0 : _c.last) || ((_e = (_d = ledger === null || ledger === void 0 ? void 0 : ledger.closed) === null || _d === void 0 ? void 0 : _d.ledger) === null || _e === void 0 ? void 0 : _e.seqNum) || 0);
                    return [2 /*return*/, {
                            endpoint: endpoint,
                            networkId: networkId,
                            ledgerSequence: ledgerSequence,
                            ledger: ledger,
                            amendments: amendments,
                            features: {
                                hooks: amendments.indexOf("ECE6819DBA5DB528F1A241695F5A9811EF99467CDE22510954FD357780BBD078") > -1,
                            },
                            connection: keepCreatedConnectionAlive ? connection : null,
                        }];
            }
        });
    });
};
exports.networkInfo = networkInfo;
var networkTxFee = function (client, tx, keepCreatedConnectionAlive) {
    if (keepCreatedConnectionAlive === void 0) { keepCreatedConnectionAlive = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, features, connection, getHooksTxFee, fee, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, networkInfo(client, true // keep alive
                    )];
                case 1:
                    _a = _d.sent(), features = _a.features, connection = _a.connection;
                    getHooksTxFee = function (tx) { return __awaiter(void 0, void 0, void 0, function () {
                        var definitions, _a, transaction, tx_blob, fee;
                        var _b, _c, _d;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0:
                                    (0, assert_1.default)(typeof tx === "string" || (typeof tx === "object" && tx !== null), "Network fee calculation on Hooks enabled networks requires a TX to calculate the fee for");
                                    _a = xrpl_binary_codec_prerelease_1.XrplDefinitions.bind;
                                    return [4 /*yield*/, (connection === null || connection === void 0 ? void 0 : connection.definitions())];
                                case 1:
                                    definitions = new (_a.apply(xrpl_binary_codec_prerelease_1.XrplDefinitions, [void 0, (_e.sent())]))();
                                    transaction = Object.assign({}, __assign(__assign({}, (typeof tx === "object"
                                        ? Object.assign({}, tx)
                                        : (0, xrpl_binary_codec_prerelease_1.decode)(tx, definitions))), { Fee: "0", SigningPubKey: "" }));
                                    if (((_b = transaction) === null || _b === void 0 ? void 0 : _b.TransactionType) === "Import" &&
                                        ((_c = transaction) === null || _c === void 0 ? void 0 : _c.Sequence) === 0) {
                                        // New account, import, fee will be zero
                                        return [2 /*return*/, "0"];
                                    }
                                    tx_blob = (0, sign_1.sign)(transaction, (0, derive_1.passphrase)(""), definitions).signedTransaction;
                                    return [4 /*yield*/, (connection === null || connection === void 0 ? void 0 : connection.send({ command: "fee", tx_blob: tx_blob }))];
                                case 2:
                                    fee = _e.sent();
                                    (0, assert_1.default)(typeof (fee === null || fee === void 0 ? void 0 : fee.error) === "undefined", "Could not get fee for tx blob from network");
                                    return [2 /*return*/, ((_d = fee === null || fee === void 0 ? void 0 : fee.drops) === null || _d === void 0 ? void 0 : _d.base_fee) || null];
                            }
                        });
                    }); };
                    if (!features.hooks) return [3 /*break*/, 5];
                    if (!tx) return [3 /*break*/, 3];
                    return [4 /*yield*/, getHooksTxFee(tx)];
                case 2:
                    _c = _d.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _c = null;
                    _d.label = 4;
                case 4:
                    _b = _c;
                    return [3 /*break*/, 6];
                case 5:
                    _b = Math.min(((connection === null || connection === void 0 ? void 0 : connection.getState().fee.avg) ||
                        (connection === null || connection === void 0 ? void 0 : connection.getState().fee.last) ||
                        50000) + 8, // Beat the queue.
                    50000 // Absurd.
                    );
                    _d.label = 6;
                case 6:
                    fee = _b;
                    if (typeof client === "string" && !keepCreatedConnectionAlive) {
                        // If constructed on demand: close
                        connection === null || connection === void 0 ? void 0 : connection.close();
                    }
                    return [2 /*return*/, String(Number(fee))];
            }
        });
    });
};
exports.networkTxFee = networkTxFee;
var accountAndLedgerSequence = function (client, account) { return __awaiter(void 0, void 0, void 0, function () {
    var accountAddress, _a, endpoint, networkId, ledgerSequence, features, connection, accountInfo, fee, accountSequence;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                (0, assert_1.default)(typeof client !== "undefined", "First param. must be XrplClient (npm: xrpl-client) or wss:// node endpoint");
                accountAddress = typeof account === "string" ? account : account.address;
                return [4 /*yield*/, networkInfo(client, true // keep alive
                    )];
            case 1:
                _a = _c.sent(), endpoint = _a.endpoint, networkId = _a.networkId, ledgerSequence = _a.ledgerSequence, features = _a.features, connection = _a.connection;
                return [4 /*yield*/, (connection === null || connection === void 0 ? void 0 : connection.send({
                        command: "account_info",
                        account: accountAddress,
                    }))];
            case 2:
                accountInfo = _c.sent();
                return [4 /*yield*/, networkTxFee(connection ? connection : client, undefined, true // keep alive
                    )];
            case 3:
                fee = _c.sent();
                if (typeof client === "string") {
                    // If constructed on demand: close
                    connection === null || connection === void 0 ? void 0 : connection.close();
                }
                accountSequence = Number(((_b = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.account_data) === null || _b === void 0 ? void 0 : _b.Sequence) || 0);
                return [2 /*return*/, {
                        networkInfo: {
                            ledgerSequence: ledgerSequence > 0 ? ledgerSequence : null,
                            accountSequence: accountSequence > 0 ? accountSequence : null,
                            endpoint: endpoint,
                            networkId: networkId,
                            features: features,
                        },
                        txValues: {
                            Account: accountAddress,
                            NetworkID: networkId,
                            Sequence: accountSequence,
                            LastLedgerSequence: ledgerSequence > 0 ? ledgerSequence + 20 : undefined,
                            Fee: String(Number(fee)),
                        },
                    }];
        }
    });
}); };
exports.accountAndLedgerSequence = accountAndLedgerSequence;
exports.txNetworkAndAccountValues = accountAndLedgerSequence;
